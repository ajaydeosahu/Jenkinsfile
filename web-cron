def map = ['10.10.24.147']

pipeline {
    agent any
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'GIT_API_BRANCH', type: 'PT_BRANCH'
    }
    environment {
        // GIT_API_BRANCH = "call_mitigation"
        GIT_URL = "https://CICDPipelineHS@bitbucket.org/notifydevteam/notify-api-code.git"
        BUILD_ENV="DEV"       // value based on SSM parameter store path and jenkins folder in bitbucket 
        AWS_REGION="us-east-1"
        GIT_CREDENTIALS = 'GIT_CREDENTIAL_ID'
    }
    stages {
        stage('Checkout') {
            steps {
                slackSend channel: 'jenkins-pipeline-dev', color: '#439FED', message: "Pipeline Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
                git branch: "${env.GIT_API_BRANCH}", credentialsId: "${env.GIT_CREDENTIALS}", url: "${env.GIT_URL}"
            }
        }
        stage('Credentials Injection'){
            steps {
                withAWSParameterStore(credentialsId: 'AWS_CREDENTIALS', naming: 'relative', path: "/API/${env.BUILD_ENV}/", recursive: true, regionName: "${env.AWS_REGION}") {
                    sh 'printenv > .env'    
                }
            }
        }
        stage('Build') {
            steps {
                slackSend channel: 'jenkins-pipeline-dev', color: '#439FED', message: "Build Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
                sh '''
                    export NVM_DIR="$HOME/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                    nvm alias default v12.18.4
                    npm install
                    npm run build
                '''
                // sh 'npm i'
                // sh 'npm run build'
                slackSend channel: 'jenkins-pipeline-dev', color: '#00aa00', message: "Build Successful - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
            }
        }
        stage('Artifact') {
            steps {
                sh """
                    zip -r dev-${BUILD_NUMBER}.zip .
                """
                script {
                    for (int i = 0; i < map.size(); i++) {
                        sh """scp dev-${BUILD_NUMBER}.zip deploy@${map[i]}:/artifact/cron/dev-${BUILD_TIMESTAMP}.zip"""
                    }
                }
            }
        }
        stage('Cron') {
            steps {
                script {
                    slackSend channel: 'jenkins-pipeline-dev', color: '#439FED', message: "Cron deployment Started - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"

                    sh """ssh -t deploy@${map[0]} << EOF
                    ln -sf /artifact/cron/dev-${BUILD_TIMESTAMP}.zip /artifact/cron/current_version;
                    unzip -qq -o /artifact/cron/current_version -d /cron/;
                    cd /cron/;
                    chmod +x jenkins/dev/cron1.sh;
                    chmod +x jenkins/dev/cron2.sh
                    ./jenkins/dev/cron1.sh
                    ./jenkins/dev/cron2.sh
                    """.stripIndent()

                }
            }
        }
    }       
    post {
    always {
        cleanWs()
    }
    success {
            script {
                    slackSend channel: 'jenkins-pipeline-dev', color: '#00aa00', message: "Pipeline executed successfully - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
                    for (int i = 0; i < map.size(); i++) {
                    sh """ssh -t deploy@${map[i]} /bin/bash -xe<< EOF
                    ln -sf /artifact/cron/dev-${BUILD_TIMESTAMP}.zip /artifact/cron/stable_version;
                    cd /artifact/cron;
                    rm -rf \\`ls -td /artifact/cron/*.zip | awk 'NR>7'\\`
                    """.stripIndent()
                    }
                }
            }
    failure {
            script {
                    slackSend channel: 'jenkins-pipeline-dev', color: '#b50000', message: "Pipeline failed and rollbacked - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
                    sh """ssh -t deploy@${map[0]} << EOF
                    unzip -o /artifact/cron/stable_version -d /cron/;
                    cd /cron/;
                    chmod +x jenkins/dev/cron1.sh;
                    chmod +x jenkins/dev/cron2.sh
                    ./jenkins/dev/cron1.sh;
                    ./jenkins/dev/cron2.sh
                    """.stripIndent()
                  
                }
            }
        }
    }